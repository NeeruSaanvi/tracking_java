 plugins {
	id 'org.springframework.boot' version '2.1.5.RELEASE'
	id 'java'
	id 'war'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.tracker'
version = '0.0.1-SNAPSHOT' 
sourceCompatibility = '1.8'

defaultTasks 'clean', 'build', 'bootWar', 'runService'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	//mavenLocal()
	mavenCentral()
}
 

def copyBuildTask = { ->
    
     def echoStdOut = new ByteArrayOutputStream()
    exec {
        commandLine 'echo', "\n\n\n Copying the build to /apps/tracker_ui/....\n\n"
        standardOutput = echoStdOut
    }
    
    def cpStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "sudo", "cp", "build/libs/tracker-ui-0.0.1-SNAPSHOT.war", "/apps/tracker_ui/tracker-ui.war"
        standardOutput = cpStdOut
    } 

    return echoStdOut.toString() + '  ' + cpStdOut.toString().trim()
}

def runServiceTask = { ->
    
     def echoStdOut = new ByteArrayOutputStream()
    exec {
        commandLine 'echo', "\n\n\nStarting the service....\n\n"
        standardOutput = echoStdOut
    }
    
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "sudo", "systemctl", "restart", "tracker_ui.service"
        standardOutput = hashStdOut
    }

    return echoStdOut.toString() + '  ' + hashStdOut.toString().trim()
}

def stopServiceTask = { ->
    
     def echoStdOut = new ByteArrayOutputStream()
    exec {
        commandLine 'echo', "\n\n\n Stopping the service....\n\n"
        standardOutput = echoStdOut
    }
    
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "sudo", "systemctl", "stop", "tracker_ui.service"
        standardOutput = hashStdOut
    }

    return echoStdOut.toString() + '  ' + hashStdOut.toString().trim()
}


task runService {
    doLast {
    	println stopServiceTask()
    	sleep(10 * 1000)
    	println copyBuildTask()
    	sleep(10 * 1000)
        println runServiceTask() 
    }
} 

//def springBootVersion = "2.1.5.RELEASE"
def springVersion = "4.3.10.RELEASE"  
def springSocialSecurity = "1.1.4.RELEASE"
def springSocialFacebook = "2.0.3.RELEASE"
def springSocialTwitter = "1.1.2.RELEASE"
def tilesVersion = "3.0.7"
def junitVersion = "4.12" 
def apacheCommonsLang = "3.6"
def swaggerVersion = "2.7.0"
def lombok = "1.18.8"

bootRun { systemProperties = System.properties }

dependencies {

    compile project(":tracker-services") 
    
    //compile("com.tracker:tracker-commons:${version}")
	//compile("com.tracker:tracker-services:${version}")
	
	annotationProcessor("org.projectlombok:lombok:${lombok}")
    compileOnly("org.projectlombok:lombok:${lombok}")
    
    compile("javax.xml.bind:jaxb-api:2.3.1")
    compile("javax.annotation:javax.annotation-api:1.3.2")
    compile("com.sun.xml.bind:jaxb-impl:2.3.1")
    compile("javax.xml.ws:jaxws-api:2.3.1")
    compile("com.sun.xml.ws:jaxws-rt:2.3.1") 
    
    
    compile("org.springframework.boot:spring-boot")
    compile("org.springframework.boot:spring-boot-autoconfigure")
    
	compile("org.springframework.boot:spring-boot-starter-batch")
	compile("org.springframework.cloud:spring-cloud-starter-config:2.1.1.RELEASE") 
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.springframework.boot:spring-boot-starter-security")
	compile("org.springframework.boot:spring-boot-starter-validation")
	compile("org.springframework.boot:spring-boot-starter-web") 
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-jersey") 
    compile("org.springframework.boot:spring-boot-devtools") 
    compile("org.springframework.boot:spring-boot-starter-log4j2")
    compile("org.apache.tiles:tiles-jsp:${tilesVersion}")
    compile("org.apache.tiles:tiles-servlet:${tilesVersion}")
   
	//compile("org.hibernate.validator:hibernate-validator:6.0.1.Final")
//	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	
	compile ("org.springframework.social:spring-social-twitter:${springSocialTwitter}")
	compile("org.springframework.social:spring-social-facebook:${springSocialFacebook}")
    compile("org.springframework.social:spring-social-security:${springSocialSecurity}")
    compile "org.springframework.social:spring-social-web:1.1.4.RELEASE"
    
  //  compile("org.springframework.social:spring-social-core:${springSocialFacebook}")
    //    compile("org.springframework.social:spring-social-config:${springSocialFacebook}")
    
    compile("org.springframework.boot:spring-boot-starter-tomcat") 
    
    compile("org.apache.tomcat.embed:tomcat-embed-jasper:9.0.20")
	compile("org.apache.tomcat:tomcat-jasper:9.0.16")
    providedRuntime("javax.servlet:javax.servlet-api:4.0.1")
    providedRuntime("javax.servlet.jsp:javax.servlet.jsp-api:2.3.1")
    providedRuntime("javax.servlet:jstl:1.2")
    //compile("javax:javaee-web-api:7.0")
     
	
    //compile("javax.validation:validation-api:2.0.1.Final")
	
	compile("org.apache.commons:commons-lang3:${apacheCommonsLang}")
	compile("commons-fileupload:commons-fileupload:1.3.3")
    compile("commons-beanutils:commons-beanutils:1.9.3")
    compile("commons-io:commons-io:2.5") 
    
	compile("com.google.guava:guava:23.0")	
	compile("com.github.ulisesbocchio:jasypt-spring-boot-starter:1.14") 
	compile("org.mindrot:jbcrypt:0.4")	
		
	compile("com.zaxxer:HikariCP:3.3.1")
	runtime("mysql:mysql-connector-java:8.0.16")
	compile("com.google.code.gson:gson:2.8.1") 
	
	compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
	
	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile("org.springframework.batch:spring-batch-test")
	testCompile("org.springframework.security:spring-security-test")
	
	compile("com.sendgrid:sendgrid-java:4.4.1")
}

 configurations.all {
    exclude group: "log4j", module: "log4j"
    exclude group: "org.apache.logging.log4j", module: "log4j-slf4j-impl"
    exclude group: "org.apache.logging.log4j", module: "log4j-api"
    exclude group: "org.apache.logging.log4j", module: "log4j-core"
    exclude group: "org.slf4j", module: "log4j-over-slf4j"
    //exclude group: "ch.qos.logback", module: "logback-classic"
    //exclude group: "ch.qos.logback", module:"logback-core"
    //exclude group: "org.springframework.boot", module:"spring-boot-starter-logging"
    exclude group: "org.apache.tomcat", module:"tomcat-jdbc"
   // exclude group: "javax.validation", module:"validation-api"
}

